#start with 2x2 matrix
m1 <- matrix(c(2,0,0,2), 2, 2)
m1
#cache its inverse (or eventual inverse)
m1_c = makeCacheMatrix(m1)
#examine
cacheSolve(m1_c)
#check computation
m1%*%cacheSolve(m1_c)
#bigger matrix
m2 <-matrix(c(rnorm(64)), 8,8)
m2_c <-makeCacheMatrix(m2)
#looks like 8x8 identity
m2 %*% cacheSolve(m2_c)
#1's in right places
round(m2 %*% cacheSolve(m2_c))
#100x100 matrix
m3 <-matrix(c(rnorm(10000)), 100,100)
m3_c <-makeCacheMatrix(m3)
#columns of m3 * inverse sum to 1
apply(m3 %*% cacheSolve(m3_c),2,sum)
#rows of m3 * inverse sum to 1
apply(m3 %*% cacheSolve(m3_c),1,sum)
#back to 2x2--what if matrix changes
m1
cacheSolve(m1_c)
#change matrix
m1 <- 2*m1
m1
#cached index doesn't change
cacheSolve(m1_c)
#no longer a valid index
m1 %*% cacheSolve(m1_c)
#use the safe version
#recomputed here
m1 %*% safeCacheSolve(m1, m1_c)
#value is cached
m1 %*% safeCacheSolve(m1, m1_c)
m1 %*% safeCacheSolve(m1, m1_c)
#unsafe method is ok now, too
m1 %*% cacheSolve(m1_c)
#start with 2x2 matrix
m1 <- matrix(c(2,0,0,2), 2, 2)
m1
#cache its inverse (or eventual inverse)
m1_c = makeCacheMatrix(m1)
#examine
cacheSolve(m1_c)
#check computation
m1%*%cacheSolve(m1_c)
#bigger matrix
m2 <-matrix(c(rnorm(64)), 8,8)
m2_c <-makeCacheMatrix(m2)
#looks like 8x8 identity
m2 %*% cacheSolve(m2_c)
#1's in right places
round(m2 %*% cacheSolve(m2_c))
#100x100 matrix
m3 <-matrix(c(rnorm(10000)), 100,100)
m3_c <-makeCacheMatrix(m3)
#columns of m3 * inverse sum to 1
apply(m3 %*% cacheSolve(m3_c),2,sum)
#rows of m3 * inverse sum to 1
apply(m3 %*% cacheSolve(m3_c),1,sum)
#back to 2x2--what if matrix changes
m1
cacheSolve(m1_c)
#change matrix
m1 <- 2*m1
m1
#cached index doesn't change
cacheSolve(m1_c)
#no longer a valid index
m1 %*% cacheSolve(m1_c)
#use the safe version
#recomputed here
m1 %*% safeCacheSolve(m1, m1_c)
#value is cached
m1 %*% safeCacheSolve(m1, m1_c)
m1 %*% safeCacheSolve(m1, m1_c)
#unsafe method is ok now, too
m1 %*% cacheSolve(m1_c)
