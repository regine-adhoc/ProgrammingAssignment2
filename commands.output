> #start with 2x2 matrix
> m1 <- matrix(c(2,0,0,2), 2, 2)
> m1
     [,1] [,2]
[1,]    2    0
[2,]    0    2
> #cache its inverse (or eventual inverse)
> m1_c = makeCacheMatrix(m1)
> #examine
> cacheSolve(m1_c)
     [,1] [,2]
[1,]  0.5  0.0
[2,]  0.0  0.5
> #check computation
> m1%*%cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> #bigger matrix
> m2 <-matrix(c(rnorm(64)), 8,8)
> m2_c <-makeCacheMatrix(m2)
> #looks like 8x8 identity
> m2 %*% cacheSolve(m2_c)
           [,1]       [,2]       [,3]       [,4]       [,5]       [,6]
[1,]  1.000e+00  2.220e-16  1.110e-16  3.331e-16 -1.388e-17 -5.551e-17
[2,]  1.665e-16  1.000e+00  0.000e+00  0.000e+00  4.163e-17 -1.665e-16
[3,] -2.082e-17  6.939e-17  1.000e+00  9.021e-17  6.505e-18 -7.633e-17
[4,]  0.000e+00  0.000e+00 -1.665e-16  1.000e+00  9.801e-17 -2.220e-16
[5,] -5.551e-17 -4.441e-16 -3.331e-16 -2.220e-16  1.000e+00  2.220e-16
[6,]  0.000e+00  4.441e-16 -1.110e-16  2.220e-16 -6.592e-17  1.000e+00
[7,] -8.327e-17 -1.804e-16 -2.567e-16  9.714e-17 -3.747e-16  4.718e-16
[8,] -3.886e-16  2.220e-16  2.220e-16 -3.331e-16  2.151e-16 -1.665e-16
           [,7]       [,8]
[1,] -2.220e-16 -3.331e-16
[2,] -1.665e-16 -1.110e-16
[3,] -4.163e-17 -4.163e-17
[4,] -2.082e-17 -2.776e-17
[5,]  0.000e+00  2.220e-16
[6,]  5.551e-17  0.000e+00
[7,]  1.000e+00  2.498e-16
[8,] -5.551e-17  1.000e+00
> #1's in right places
> round(m2 %*% cacheSolve(m2_c))
getting cached data
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    1    0    0    0    0    0    0    0
[2,]    0    1    0    0    0    0    0    0
[3,]    0    0    1    0    0    0    0    0
[4,]    0    0    0    1    0    0    0    0
[5,]    0    0    0    0    1    0    0    0
[6,]    0    0    0    0    0    1    0    0
[7,]    0    0    0    0    0    0    1    0
[8,]    0    0    0    0    0    0    0    1
> #100x100 matrix
> m3 <-matrix(c(rnorm(10000)), 100,100)
> m3_c <-makeCacheMatrix(m3)
> #columns of m3 * inverse sum to 1
> apply(m3 %*% cacheSolve(m3_c),2,sum)
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [34] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [67] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[100] 1
> #columns of m3 * inverse sum to 1
> apply(m3 %*% cacheSolve(m3_c),1,sum)
getting cached data
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [34] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [67] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[100] 1
> #back to 2x2--what if matrix changes
> m1
     [,1] [,2]
[1,]    2    0
[2,]    0    2
> cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]  0.5  0.0
[2,]  0.0  0.5
> #change matrix
> m1 <- 2*m1
> m1
     [,1] [,2]
[1,]    4    0
[2,]    0    4
> #cached index doesn't change
> cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]  0.5  0.0
[2,]  0.0  0.5
> #no longer a valid index
> m1 %*% cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]    2    0
[2,]    0    2
> #use the safe version
> #recomputed here
> m1 %*% safeCacheSolve(m1, m1_c)
matrix has changed, computing new inverse
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> #value is cached
> m1 %*% safeCacheSolve(m1, m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> m1 %*% safeCacheSolve(m1, m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> #unsafe method is ok now, too
> m1 %*% cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> 
