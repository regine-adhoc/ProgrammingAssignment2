> source('~/R_programming_assignment2/ProgrammingAssignment2/cachematrix.R')
> loadhistory("~/R_programming_assignment2/ProgrammingAssignment2/commands.Rhistory")
> #start with 2x2 matrix
> m1 <- matrix(c(2,0,0,2), 2, 2)
> m1
     [,1] [,2]
[1,]    2    0
[2,]    0    2
> #cache its inverse (or eventual inverse)
> m1_c = makeCacheMatrix(m1)
> #examine
> cacheSolve(m1_c)
     [,1] [,2]
[1,]  0.5  0.0
[2,]  0.0  0.5
> #check computation
> m1%*%cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> #bigger matrix
> m2 <-matrix(c(rnorm(64)), 8,8)
> m2_c <-makeCacheMatrix(m2)
> #looks like 8x8 identity
> m2 %*% cacheSolve(m2_c)
              [,1]          [,2]          [,3]          [,4]
[1,]  1.000000e+00  5.551115e-17  0.000000e+00 -1.665335e-16
[2,]  4.163336e-17  1.000000e+00  2.359224e-16  1.110223e-16
[3,]  1.665335e-16 -1.110223e-16  1.000000e+00  2.220446e-16
[4,]  3.469447e-17 -4.024558e-16 -2.428613e-16  1.000000e+00
[5,]  1.665335e-16 -1.942890e-16 -4.163336e-17  8.326673e-17
[6,]  1.942890e-16  3.330669e-16  1.665335e-16  1.665335e-16
[7,] -2.775558e-17 -3.885781e-16 -2.220446e-16 -3.885781e-16
[8,]  5.551115e-17  4.163336e-16  2.775558e-17  0.000000e+00
              [,5]          [,6]          [,7]          [,8]
[1,]  1.110223e-16  5.551115e-17  0.000000e+00 -1.040834e-17
[2,]  2.775558e-16 -2.775558e-17 -8.326673e-17 -3.404395e-17
[3,] -2.220446e-16  4.996004e-16  1.110223e-16 -3.586541e-16
[4,] -4.163336e-16  3.469447e-17  3.053113e-16 -3.970348e-16
[5,]  1.000000e+00  2.636780e-16  1.942890e-16 -4.477755e-16
[6,] -9.992007e-16  1.000000e+00 -1.110223e-16  2.237793e-16
[7,]  0.000000e+00  5.551115e-17  1.000000e+00  4.336809e-18
[8,]  0.000000e+00 -6.383782e-16 -2.220446e-16  1.000000e+00
> #1's in right places
> round(m2 %*% cacheSolve(m2_c))
getting cached data
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    1    0    0    0    0    0    0    0
[2,]    0    1    0    0    0    0    0    0
[3,]    0    0    1    0    0    0    0    0
[4,]    0    0    0    1    0    0    0    0
[5,]    0    0    0    0    1    0    0    0
[6,]    0    0    0    0    0    1    0    0
[7,]    0    0    0    0    0    0    1    0
[8,]    0    0    0    0    0    0    0    1
> #100x100 matrix
> m3 <-matrix(c(rnorm(10000)), 100,100)
> m3_c <-makeCacheMatrix(m3)
> #columns of m3 * inverse sum to 1
> apply(m3 %*% cacheSolve(m3_c),2,sum)
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [35] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [69] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
> #rows of m3 * inverse sum to 1
> apply(m3 %*% cacheSolve(m3_c),1,sum)
getting cached data
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [35] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [69] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
> #back to 2x2--what if matrix changes
> m1
     [,1] [,2]
[1,]    2    0
[2,]    0    2
> cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]  0.5  0.0
[2,]  0.0  0.5
> #change matrix
> m1 <- 2*m1
> m1
     [,1] [,2]
[1,]    4    0
[2,]    0    4
> #cached inverse doesn't change
> cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]  0.5  0.0
[2,]  0.0  0.5
> #no longer a valid inverse
> m1 %*% cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]    2    0
[2,]    0    2
> #use the safe version
> #recomputed here
> m1 %*% safeCacheSolve(m1, m1_c)
matrix has changed, computing new inverse
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> #value is cached
> m1 %*% safeCacheSolve(m1, m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> m1 %*% safeCacheSolve(m1, m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> #unsafe method is ok now, too
> m1 %*% cacheSolve(m1_c)
getting cached data
     [,1] [,2]
[1,]    1    0
[2,]    0    1
